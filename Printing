INTERSECT
        # for i in [p1[0], (p1[1]+l)/2, (p1[1]-l)/2, p2[0], (p2[1]+l)/2, (p2[1]-l)/2]:
        #     print(i)

        # a1 = 1.0/(2*(p1[1]-l))
        # b1 = 0 - float(p1[0])/(p1[1]-l)
        # c1 = float(p1[0]**2 + p1[1]**2 - l**2)/(2*(p1[1]-l))
        # print(str(a1) + "x^2 + " + str(b1) + "x + " + str(c1))

        # a2 = 1.0/(2*(p2[1]-l))
        # b2 = 0 - float(p2[0])/(p2[1]-l)
        # c2 = float(p2[0]**2 + p2[1]**2 - l**2)/(2*(p2[1]-l))
        # print(str(a2) + "x^2 + " + str(b2) + "x + " + str(c2))

        # print()
        # print(str(a) + " " + str(a1 - a2))
        # print(str(b) + " " + str(b1 - b2))
        # print(str(c) + " " + str(c1 - c2))

        # print(a == a1 - a2)
        # print(b == b1 - b2)
        # print(c == c1 - c2)

CIRCLE LOWEST POINT
    def circle(self, p1, p2, p3):
        # reordering
        if p1[0] > p2[0]:
            temp = p1
            p1 = p2
            p2 = temp
        if p1[0] > p3[0]:
            temp = p1
            p1 = p3
            p3 = temp
        
        # finding the lowest point of the circle
        m1x = float(p1[0] + p2[0])/2.0
        m1y = float(p1[1] + p2[1])/2.0
        if p2[0] - p1[0] != 0 and p2[1] - p1[1] != 0:
            s1 = float(p2[1] - p1[1])/float(p2[0] - p1[0])
            cy = None
            cx = None
        else:
            s1 = None
            if p2[0] - p1[0] == 0:
                cy = m1y
                cx = None
            else:
                cx = m1x
                cy = None

        m2x = float(p1[0] + p3[0])/2.0
        m2y = float(p1[1] + p3[1])/2.0
        if p3[0] - p1[0] != 0 and p3[1] - p1[1] != 0:
            s2 = float(p3[1] - p1[1])/float(p3[0] - p1[0])
        else:
            s2 = None
            if p3[0] - p1[0] == 0:
                cy = m2y
            else:
                cx = m2x
        
        if cy != None and cx != None:
            r = ((p1[0]-cx)**2 + (p1[1]-cy)**2)**0.5
            return [cx, cy-r]
        if cy == None and cx == None:
            cx = float(m2y - m1y + m2x/s2 - m1x/s1)/(1/s2 - 1/s1)
            cy = m2y - (1/s2)*(cx-m2x)
        elif cy != None:
            if s1 == None:
                cx = m2x - s2*(cy - m2y)
            if s2 == None:
                cx = m1x - s1*(cy - m1y)
        elif cx != None:
            if s1 == None:
                cy = (m2x - cx)/(s2) + m2y
            if s2 == None:
                cy = (m1x - cx)/s1 + m1y

        # print('x = ' + str(cx))
        # print('y = ' + str(cy))
        r = ((p1[0]-cx)**2 + (p1[1]-cy)**2)**0.5
        # print('r = ' + str(r))
        return [cx, cy-r]

NEXTLEAF
        if (successor._left == None) and (successor._right == None):
            return successor
        else:

PREVLEAF
        if (predessesor._left == None) and (predessesor._right == None):
            return predessesor
        else: